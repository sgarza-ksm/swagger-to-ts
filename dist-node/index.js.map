{"version":3,"file":"index.js","sources":["../dist-src/utils.js","../dist-src/property-mapper.js","../dist-src/v2.js","../dist-src/v3.js","../dist-src/index.js"],"sourcesContent":["export function comment(text) {\n    return `/**\n  * ${text.trim().replace(\"\\n+$\", \"\").replace(/\\n/g, \"\\n  * \")}\n  */\n`;\n}\nexport function fromEntries(entries) {\n    return entries.reduce((obj, [key, val]) => ({ ...obj, [key]: val }), {});\n}\nexport function nodeType(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return undefined;\n    }\n    if (obj[\"$ref\"]) {\n        return \"ref\";\n    }\n    if (Array.isArray(obj.enum)) {\n        return \"enum\";\n    }\n    if (obj.type === \"boolean\") {\n        return \"boolean\";\n    }\n    if ([\"binary\", \"byte\", \"date\", \"dateTime\", \"password\", \"string\"].includes(obj.type)) {\n        return \"string\";\n    }\n    if ([\"double\", \"float\", \"integer\", \"number\"].includes(obj.type)) {\n        return \"number\";\n    }\n    if (Array.isArray(obj.anyOf)) {\n        return \"anyOf\";\n    }\n    if (Array.isArray(obj.oneOf)) {\n        return \"oneOf\";\n    }\n    if (obj.type === \"array\" || obj.items) {\n        return \"array\";\n    }\n    return \"object\";\n}\nexport function swaggerVersion(definition) {\n    const { openapi } = definition;\n    if (openapi && parseInt(openapi, 10) === 3) {\n        return 3;\n    }\n    const { swagger } = definition;\n    if (swagger && parseInt(swagger, 10) === 2) {\n        return 2;\n    }\n    throw new Error(`üöè version missing from schema; specify whether this is OpenAPI v3 or v2 https://swagger.io/specification`);\n}\nexport function transformRef(ref, root = \"\") {\n    const isExternalRef = !ref.startsWith(\"#\");\n    if (isExternalRef)\n        return \"any\";\n    const parts = ref.replace(/^#\\//, root).split(\"/\");\n    return `${parts[0]}[\"${parts.slice(1).join('\"][\"')}\"]`;\n}\nexport function tsArrayOf(type) {\n    return `(${type})[]`;\n}\nexport function tsTupleOf(types) {\n    return `[${types.join(\", \")}]`;\n}\nexport function tsIntersectionOf(types) {\n    return `(${types.join(\") & (\")})`;\n}\nexport function tsPartial(type) {\n    return `Partial<${type}>`;\n}\nexport function tsUnionOf(types) {\n    return `(${types.join(\") | (\")})`;\n}\nexport function unrefComponent(components, ref) {\n    const [type, object] = ref.match(/(?<=\\[\")([^\"]+)/g);\n    return components[type][object];\n}\n","import { fromEntries } from \"./utils\";\nexport default function propertyMapper(schema, transform) {\n    if (!transform) {\n        return schema;\n    }\n    return JSON.parse(JSON.stringify(schema), (_, node) => {\n        if (!node.properties) {\n            return node;\n        }\n        node.properties = fromEntries(Object.entries(node.properties).map(([key, val]) => {\n            if (val.$ref) {\n                val.$ref = String(val.$ref);\n                return [key, val];\n            }\n            const schemaObject = val;\n            const property = transform(schemaObject, {\n                interfaceType: schemaObject.type,\n                optional: !Array.isArray(node.required) || node.required.includes(key),\n                description: schemaObject.description,\n            });\n            if (property.optional) {\n                if (Array.isArray(node.required)) {\n                    node.required = node.required.filter((r) => r !== key);\n                }\n            }\n            else {\n                node.required = [...(node.required || []), key];\n            }\n            return [\n                key,\n                {\n                    ...val,\n                    type: property.interfaceType,\n                    description: property.description,\n                },\n            ];\n        }));\n        return node;\n    });\n}\n","import propertyMapper from \"./property-mapper\";\nimport { comment, nodeType, transformRef, tsArrayOf, tsIntersectionOf, tsUnionOf, } from \"./utils\";\nexport const PRIMITIVES = {\n    boolean: \"boolean\",\n    binary: \"string\",\n    byte: \"string\",\n    date: \"string\",\n    dateTime: \"string\",\n    password: \"string\",\n    string: \"string\",\n    double: \"number\",\n    float: \"number\",\n    integer: \"number\",\n    number: \"number\",\n};\nexport default function generateTypesV2(input, options) {\n    const rawSchema = options && options.rawSchema;\n    let definitions;\n    if (rawSchema) {\n        definitions = input;\n    }\n    else {\n        const document = input;\n        if (!document.definitions) {\n            throw new Error(`‚õîÔ∏è 'definitions' missing from schema https://swagger.io/specification/v2/#definitions-object`);\n        }\n        definitions = document.definitions;\n    }\n    const propertyMapped = options\n        ? propertyMapper(definitions, options.propertyMapper)\n        : definitions;\n    function transform(node) {\n        switch (nodeType(node)) {\n            case \"ref\": {\n                return transformRef(node.$ref, rawSchema ? \"definitions/\" : \"\");\n            }\n            case \"string\":\n            case \"number\":\n            case \"boolean\": {\n                return nodeType(node) || \"any\";\n            }\n            case \"enum\": {\n                return tsUnionOf(node.enum.map((item) => typeof item === \"number\" || typeof item === \"boolean\"\n                    ? item\n                    : `'${item}'`));\n            }\n            case \"object\": {\n                if ((!node.properties || !Object.keys(node.properties).length) &&\n                    !node.allOf &&\n                    !node.additionalProperties) {\n                    return `{ [key: string]: any }`;\n                }\n                let properties = createKeys(node.properties || {}, node.required);\n                if (node.additionalProperties) {\n                    properties += `[key: string]: ${nodeType(node.additionalProperties) || \"any\"};\\n`;\n                }\n                return tsIntersectionOf([\n                    ...(node.allOf ? node.allOf.map(transform) : []),\n                    ...(properties ? [`{ ${properties} }`] : []),\n                ]);\n                break;\n            }\n            case \"array\": {\n                return tsArrayOf(transform(node.items));\n            }\n        }\n        return \"\";\n    }\n    function createKeys(obj, required = []) {\n        let output = \"\";\n        Object.entries(obj).forEach(([key, value]) => {\n            if (value.description) {\n                output += comment(value.description);\n            }\n            output += `\"${key}\"${!required || !required.includes(key) ? \"?\" : \"\"}: `;\n            output += transform(value);\n            output += \";\\n\";\n        });\n        return output;\n    }\n    return `export interface definitions {\n    ${createKeys(propertyMapped, Object.keys(propertyMapped))}\n  }`;\n}\n","import propertyMapper from \"./property-mapper\";\nimport { comment, nodeType, transformRef, tsArrayOf, tsIntersectionOf, tsPartial, tsUnionOf, tsTupleOf, unrefComponent, } from \"./utils\";\nexport const PRIMITIVES = {\n    boolean: \"boolean\",\n    string: \"string\",\n    integer: \"number\",\n    number: \"number\",\n};\nexport default function generateTypesV3(input, options) {\n    const { rawSchema = false } = options || {};\n    let { paths = {}, components = { schemas: {} } } = input;\n    if (rawSchema) {\n        components = { schemas: input };\n    }\n    else {\n        if (!input.components && !input.paths) {\n            throw new Error(`No components or paths found. Specify --raw-schema to load a raw schema.`);\n        }\n    }\n    const operations = {};\n    const propertyMapped = options\n        ? propertyMapper(components.schemas, options.propertyMapper)\n        : components.schemas;\n    function transform(node) {\n        switch (nodeType(node)) {\n            case \"ref\": {\n                return transformRef(node.$ref, rawSchema ? \"schemas/\" : \"\");\n            }\n            case \"string\":\n            case \"number\":\n            case \"boolean\": {\n                return nodeType(node) || \"any\";\n            }\n            case \"enum\": {\n                return tsUnionOf(node.enum.map((item) => typeof item === \"number\" || typeof item === \"boolean\"\n                    ? item\n                    : `'${item.replace(/'/g, \"\\\\'\")}'`));\n            }\n            case \"oneOf\": {\n                return tsUnionOf(node.oneOf.map(transform));\n            }\n            case \"anyOf\": {\n                return tsIntersectionOf(node.anyOf.map((anyOf) => tsPartial(transform(anyOf))));\n            }\n            case \"object\": {\n                if ((!node.properties || !Object.keys(node.properties).length) &&\n                    !node.allOf &&\n                    !node.additionalProperties) {\n                    return `{ [key: string]: any }`;\n                }\n                let properties = createKeys(node.properties || {}, node.required);\n                const additionalProperties = node.additionalProperties\n                    ? [\n                        `{ [key: string]: ${node.additionalProperties === true\n                            ? \"any\"\n                            : transform(node.additionalProperties) || \"any\"};}\\n`,\n                    ]\n                    : [];\n                return tsIntersectionOf([\n                    ...(node.allOf ? node.allOf.map(transform) : []),\n                    ...(properties ? [`{ ${properties} }`] : []),\n                    ...additionalProperties,\n                ]);\n            }\n            case \"array\": {\n                if (Array.isArray(node.items)) {\n                    return tsTupleOf(node.items.map(transform));\n                }\n                else {\n                    return tsArrayOf(node.items ? transform(node.items) : \"any\");\n                }\n            }\n        }\n        return \"\";\n    }\n    function createKeys(obj, required) {\n        let output = \"\";\n        Object.entries(obj).forEach(([key, value]) => {\n            if (value.description) {\n                output += comment(value.description);\n            }\n            output += `\"${key}\"${!required || !required.includes(key) ? \"?\" : \"\"}: `;\n            if (value.nullable) {\n                output += \"(\";\n            }\n            output += transform(value.schema ? value.schema : value);\n            if (value.nullable) {\n                output += \") | null\";\n            }\n            output += \";\\n\";\n        });\n        return output;\n    }\n    function transformParameters(parameters) {\n        const allParameters = {};\n        let output = `parameters: {\\n`;\n        parameters.forEach((p) => {\n            if (\"$ref\" in p) {\n                const referencedValue = p.$ref\n                    .substr(2)\n                    .split(\"/\")\n                    .reduce((value, property) => value[property], input);\n                if (!allParameters[referencedValue.in])\n                    allParameters[referencedValue.in] = {};\n                allParameters[referencedValue.in][referencedValue.name] = transformRef(p.$ref);\n                return;\n            }\n            if (!allParameters[p.in])\n                allParameters[p.in] = {};\n            allParameters[p.in][p.name] = p;\n        });\n        Object.entries(allParameters).forEach(([loc, locParams]) => {\n            output += `\"${loc}\": {\\n`;\n            Object.entries(locParams).forEach(([paramName, paramProps]) => {\n                if (typeof paramProps === \"string\") {\n                    const { required } = unrefComponent(components, paramProps);\n                    const key = required ? `\"${paramName}\"` : `\"${paramName}\"?`;\n                    output += `${key}: ${paramProps}\\n`;\n                    return;\n                }\n                if (paramProps.description)\n                    output += comment(paramProps.description);\n                output += `\"${paramName}\"${paramProps.required === true ? \"\" : \"?\"}: ${transform(paramProps.schema)};\\n`;\n            });\n            output += `}\\n`;\n        });\n        output += `}\\n`;\n        return output;\n    }\n    function transformOperation(operation) {\n        let output = \"\";\n        output += `{\\n`;\n        if (operation.parameters) {\n            output += transformParameters(operation.parameters);\n        }\n        if (operation.requestBody) {\n            output += `requestBody: {\\n`;\n            Object.entries(operation.requestBody.content || {}).forEach(([contentType, { schema }]) => {\n                output += `\"${contentType}\": ${transform(schema)};\\n`;\n            });\n            output += `}\\n`;\n        }\n        output += `responses: {\\n`;\n        Object.entries(operation.responses).forEach(([statusCode, response]) => {\n            if (response.description)\n                output += comment(response.description);\n            if (!response.content || !Object.keys(response.content).length) {\n                const type = statusCode === \"204\" || Math.floor(+statusCode / 100) === 3\n                    ? \"never\"\n                    : \"unknown\";\n                output += `\"${statusCode}\": ${type};\\n`;\n                return;\n            }\n            output += `\"${statusCode}\": {\\n`;\n            Object.entries(response.content).forEach(([contentType, encodedResponse]) => {\n                output += `\"${contentType}\": ${transform(encodedResponse.schema)};\\n`;\n            });\n            output += `}\\n`;\n        });\n        output += `}\\n`;\n        output += `}\\n`;\n        return output;\n    }\n    function transformPaths(paths) {\n        let output = \"\";\n        Object.entries(paths).forEach(([path, pathItem]) => {\n            output += `\"${path}\": {\\n`;\n            Object.entries(pathItem).forEach(([field, operation]) => {\n                const isMethod = [\n                    \"get\",\n                    \"put\",\n                    \"post\",\n                    \"delete\",\n                    \"options\",\n                    \"head\",\n                    \"patch\",\n                    \"trace\",\n                ].includes(field);\n                if (isMethod) {\n                    operation = operation;\n                    if (operation.operationId) {\n                        output += `\"${field}\": operations[\"${operation.operationId}\"];\\n`;\n                        operations[operation.operationId] = operation;\n                    }\n                    else {\n                        if (operation.description)\n                            output += comment(operation.description);\n                        output += `\"${field}\": ${transformOperation(operation)}`;\n                    }\n                }\n            });\n            if (pathItem.parameters) {\n                output += transformParameters(pathItem.parameters);\n            }\n            output += `}\\n`;\n        });\n        return output;\n    }\n    if (rawSchema) {\n        return `export interface schemas {\n  ${createKeys(propertyMapped, Object.keys(propertyMapped))}\n}`;\n    }\n    let finalOutput = \"\";\n    if (Object.keys(paths).length) {\n        finalOutput += `export interface paths {\n  ${transformPaths(paths)}\n}\n\n`;\n    }\n    finalOutput += \"export interface operations {\\n\";\n    for (const [operationId, operation] of Object.entries(operations)) {\n        if (operation.description)\n            finalOutput += comment(operation.description);\n        finalOutput += `\"${operationId}\": ${transformOperation(operation)}`;\n    }\n    finalOutput += \"\\n}\\n\\n\";\n    finalOutput += \"export interface components {\\n\";\n    if (components.parameters && Object.keys(components.parameters).length) {\n        finalOutput += `\nparameters: {\n  ${createKeys(components.parameters, Object.keys(components.parameters))}\n}\\n`;\n    }\n    if (Object.keys(propertyMapped).length) {\n        finalOutput += `schemas: {\n  ${createKeys(propertyMapped, Object.keys(propertyMapped))}\n}`;\n    }\n    if (components.responses && Object.keys(components.responses).length) {\n        finalOutput += `\nresponses: {\n  ${createKeys(components.responses, Object.keys(components.responses))}\n}`;\n    }\n    finalOutput += \"\\n}\";\n    return finalOutput;\n}\n","import path from \"path\";\nimport prettier from \"prettier\";\nimport { swaggerVersion } from \"./utils\";\nimport v2 from \"./v2\";\nimport v3 from \"./v3\";\nexport const WARNING_MESSAGE = `/**\n* This file was auto-generated by openapi-typescript.\n* Do not make direct changes to the file.\n*/\n\n\n`;\nexport default function swaggerToTS(schema, options) {\n    const version = (options && options.version) ||\n        swaggerVersion(schema);\n    let output = `${WARNING_MESSAGE}`;\n    switch (version) {\n        case 2: {\n            output = output.concat(v2(schema, options));\n            break;\n        }\n        case 3: {\n            output = output.concat(v3(schema, options));\n            break;\n        }\n    }\n    let prettierOptions = { parser: \"typescript\" };\n    if (options && options.prettierConfig) {\n        try {\n            const userOptions = prettier.resolveConfig.sync(path.resolve(process.cwd(), options.prettierConfig));\n            prettierOptions = {\n                ...prettierOptions,\n                ...userOptions,\n            };\n        }\n        catch (err) {\n            console.error(`‚ùå ${err}`);\n        }\n    }\n    return prettier.format(output, prettierOptions);\n}\n"],"names":["comment","text","trim","replace","fromEntries","entries","reduce","obj","key","val","nodeType","undefined","Array","isArray","enum","type","includes","anyOf","oneOf","items","swaggerVersion","definition","openapi","parseInt","swagger","Error","transformRef","ref","root","isExternalRef","startsWith","parts","split","slice","join","tsArrayOf","tsTupleOf","types","tsIntersectionOf","tsPartial","tsUnionOf","unrefComponent","components","object","match","propertyMapper","schema","transform","JSON","parse","stringify","_","node","properties","Object","map","$ref","String","schemaObject","property","interfaceType","optional","required","description","filter","r","generateTypesV2","input","options","rawSchema","definitions","document","propertyMapped","item","keys","length","allOf","additionalProperties","createKeys","output","forEach","value","generateTypesV3","paths","schemas","operations","nullable","transformParameters","parameters","allParameters","p","referencedValue","substr","in","name","loc","locParams","paramName","paramProps","transformOperation","operation","requestBody","content","contentType","responses","statusCode","response","Math","floor","encodedResponse","transformPaths","path","pathItem","field","isMethod","operationId","finalOutput","WARNING_MESSAGE","swaggerToTS","version","concat","v2","v3","prettierOptions","parser","prettierConfig","userOptions","prettier","resolveConfig","sync","resolve","process","cwd","err","console","error","format"],"mappings":"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"}